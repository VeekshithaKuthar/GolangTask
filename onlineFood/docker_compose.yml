version: "3.9"

services:
  # -------- Controller-only node --------
  kafka-controller:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-controller
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      JMX_PORT: 55551
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5555:/opt/jmx/kafka-jmx.yml"
    ports:
      - "9093:9093"
    volumes:
      - controller-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    networks: [demo-network]

  # -------- Broker 1 --------
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:19092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      JMX_PORT: 55561
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5556:/opt/jmx/kafka-jmx.yml"
    ports:
      - "19092:19092"
    volumes:
      - kafka1-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Broker 2 --------
  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      JMX_PORT: 55571
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5557:/opt/jmx/kafka-jmx.yml"
    ports:
      - "29092:29092"
    volumes:
      - kafka2-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Broker 3 --------
  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    environment:
      CLUSTER_ID: "5hDiE5vETjicqnOmlhZ9Og"
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:39092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      JMX_PORT: 55591
      KAFKA_OPTS: "-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=5559:/opt/jmx/kafka-jmx.yml"
    ports:
      - "39092:39092"
    volumes:
      - kafka3-logs:/tmp/kraft-combined-logs
      - ./monitoring:/opt/jmx:ro
    depends_on: [kafka-controller]
    networks: [demo-network]

  # -------- Kafka UI --------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "58080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks: [demo-network]

  # -------- Prometheus --------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - kafka-controller
      - kafka1
      - kafka2
      - kafka3
    networks: [demo-network]

  # -------- Postgres --------
  pg:
  image: postgres:latest
  container_name: postgres
  environment:
    POSTGRES_USER: app
    POSTGRES_PASSWORD: app123
    POSTGRES_DB: usersdb
  volumes:
    - ./db-init:/docker-entrypoint-initdb.d  
  ports:
    - "5432:5432"
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U app -d usersdb"]
    interval: 5s
    timeout: 3s
    retries: 10
  networks: [demo-network]

  # -------- Postgres Exporter --------
  pg-exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://app:app123@pg:5432/usersdb?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      pg:
        condition: service_healthy
    networks: [demo-network]

  # -------- Adminer UI --------
  pg-ui:
    image: adminer
    container_name: pgui
    ports:
      - "28080:8080"
    networks: [demo-network]

  # -------- Orders App --------
  UserOrders:
    image: docker.io/veekshithakuthar/usersorder-e2e:v02
    container_name: UserOrders
    environment:
      PORT: "8089"
      DSN: "host=pg user=app password=app123 dbname=usersdb port=5432 sslmode=disable"
      KAFKA_BROKERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    ports:
      - "8089:8089"
    depends_on:
      pg:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    networks: [demo-network]

    # -------- Orders App --------
  Payments:
    image: docker.io/veekshithakuthar/payment-e2e:v01
    container_name: Payments
    environment:
      PORT: "8089"
      DSN: "host=pg user=app password=app123 dbname=paymentdb port=5432 sslmode=disable"
      KAFKA_BROKERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    ports:
      - "8090:8089"
    depends_on:
      pg:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    networks: [demo-network]


  # -------- Kafka Init --------
  # kafka-init:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka-init
  #   depends_on:
  #     - kafka1
  #     - kafka2
  #     - kafka3
  #   entrypoint: [ "sh", "-c" ]
  #   command: |
  #     "echo 'Waiting for Kafka brokers...';
  #     sleep 15;
  #     kafka-topics --create --if-not-exists \
  #       --topic orders.v1 \
  #       --partitions 3 \
  #       --replication-factor 3 \
  #       --bootstrap-server kafka1:9092;
  #     kafka-topics --list --bootstrap-server kafka1:9092;
  #     echo 'âœ… Topics created successfully';"
  #   networks: [demo-network]

networks:
  demo-network: {}

volumes:
  controller-logs: {}
  kafka1-logs: {}
  kafka2-logs: {}
  kafka3-logs: {}
